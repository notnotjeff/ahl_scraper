continue
game.season_id
continue
game.season_id
continue
game.season_id
continue
game.season_id
continue
season
continue
season
continue
seasons[:seasons]
seasons.keys
seasons
seasons[0]
seasons
continue
s
continue
raw_data[:shootoutDetails][:visitingTeamShots].map {|sh| sh[:shooter][:id] }
raw_data[:shootoutDetails][:homeTeamShots].map {|sh| sh[:shooter][:id] }
raw_data[:shootoutDetails][:homeTeamShots][0][:shooter][:id]
raw_data[:shootoutDetails][:homeTeamShots][0]
raw_data[:shootoutDetails][:homeTeamShots]
raw_data[:shootoutDetails]
continue
game.home_shootout_attempts
continue
raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index { |att, i| 1 }
raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index { |att, i| }
@raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index { |att, i| }
        end
          ShootoutAttempt.new(att, { number: i + 1 })
@raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index do |att, i|
game.home_shootout_attempts
continue
(raw_data.dig(:shootoutDetails, :homeTeamShots) || []).map.with_index
raw_data.dig(:shootoutDetails, :homeTeamShots) || []
raw_data.dig(:shootoutDetails, :homeTeamShots)
continue
raw_data.dig(:shootoutDetails, :homeTeamShots)
Array.new(raw_data.dig(:shootoutDetails, :homeTeamShots))
game.home_shootout_attempts
continue
game.home_shootout_attempts
continue
game.home_shootout_attempts
continue
game.home_shootout_attempts
game.home_shootout_attempts[0]
continue
game.overtimes.map(&:number)
game.overtimes[0].number
game.overtimes[0]number
game.overtimes.number
game.overtimes
continue
raw_data[:penaltyShots][:homeTeam].map {|s| s[:shooter][:id]}
raw_data[:penaltyShots][:visitingTeam].map {|s| s[:shooter][:id]}
raw_data[:penaltyShots][:visitingTeam]
raw_data[:penaltyShots]
raw_data.keys
continue
raw_data[:mostValuablePlayers][0]
raw_data[:mostValuablePlayers]
continue
raw_data[:details]
game.info.keys
game.info
continue
p.map { |pen| pen[:servedBy][:id] }
p[0]
p=Array.new(raw_data[:periods]).map { |pd| pd[:penalties] }.flatten
p=Array.new(@raw_data[:periods]).map { |pd| pd[:penalties] }.flatten
raw_data.keys
raw_data
raw_data[:penalties]
raw_data.penalties
game.penalties[0]
game.goals.map { |g| g.scored_by[:id] }
game.goals[0].scored_by
game.goals[0].keys
game.goals.values
game.goals
game.goals.keys
game.goals.goalscorer
game.goals.scored_by
game.goals
raw_data[:homeTeam][:goalies].map {|s| s[:info][:id]}
raw_data[:visitingTeam][:goalies].map {|s| s[:info][:id]}
raw_data[:visitingTeam][:skaters].map {|s| s[:info][:id]}
raw_data[:homeTeam][:skaters].map {|s| s[:info][:id]}
raw_data[:homeTeam][:skaters]
raw_data[:homeTeam].keys
raw_data[:homeTeam]
raw_data[:visitingTeam][:coaches]
raw_data[:homeTeam][:coaches]
raw_data[:referees]
raw_data[:visitingTeam][:info]
raw_data[:homeTeam][:info]
raw_data[:mostValuablePlayers][2][:player][:info][:id]
raw_data[:mostValuablePlayers][1][:player][:info][:id]
raw_data[:mostValuablePlayers][0][:player][:info][:id]
raw_data[:mostValuablePlayers][0][:player][:info]
raw_data[:mostValuablePlayers][0]
raw_data[:mostValuablePlayers]
raw_data.keys
raw_data[:mostValueablePlayers]
game.three_stars.map { |t| t }
game.three_stars.map { |t| t.id }
game.away_team
game.home_team
home_team
game.winning_team
raw_data[:homeTeam][:info]
raw_data[:homeTeam][:coaches]
raw_data.keys
raw_data[:referees]
raw_data[:details][:id]
raw_data[:details]
raw_data.keys
raw_data[:info]
raw_data
continue
game.away_skaters
game
continue
game
continue
game
game.home_skaters
continue
game
continue
game.values
game
game.shootout
game.shootout?
continue
game.shootout?
game.instance_variable_get("@raw_data")[:hasShootout]
game
continue
game.instance_variable_get("@raw_data")[:hasShootout]
game.instance_variable_get("@raw_data")[:hashShootout]
game.instance_variable_get("@raw_data")
game.methods
game[@raw_data][:hasShootout]
game.@raw_data[:hasShootout]
game.raw_data[:hasShootout]
game
continue
game
game.values
continue
game.values
continue
game.values
continue
game.values
continue
game.values
continue
game.values
continue
game.values
continue
AhlScraper::Games::GameObject::ATTRIBUTES
AhlScraper::Games::GameObject.instance_methods(false)
game.class::ATTRIBUTES
continue
game.class.instance_methods(false) - %i[to_json inspect each keys [] values] + %i[game_id]
game.class.instance_methods(false)
game.class::CLASS_METHODS
game.class.CLASS_METHODS
game.CLASS_METHODS
continue
game.values.home_coaches
game.values
continue
game.values
continue
game.values
continue
game.class.instance_methods(false) - %i[to_json inspect each keys [] values]
game.class.instance_methods(false) - %i[to_json inspect each keys []]
game.class.instance_methods(false)
game.values
values
self.class.instance_methods(false)
continue
self.class.instance_methods(false)
game.values
continue
game.values
continue
game.values
game
continue
game.raw_data[:homeTeam][:stats]
game.raw_data[:homeTeam][:info]
game.raw_data[:homeTeam].keys
game.raw_data[:homeTeam]
game.raw_data[:details]
game.raw_data.keys
game.values
game
continue
game.raw_data[:details][:status]
game.raw_data[:details]
game.raw_data.keys
game.values
game
continue
game.raw_data[:shootoutDetails].keys
game.raw_data[:shootoutDetails]
game.raw_data.shootoutDetails
game.raw_data.keys
game.raw_data
continue
home_won?
home_scored_last?
continue
home_team_started?
continue
home_team_started?
continue
home_team_started?
continue
home_won?
continue
home_attempt_data.find { |att| att[:isGameWinningGoal] == true }
home_attempt_data.select { |att| att[:isGameWinningGoal] == true }
home_won?
continue
home_won?
continue
game.raw_data.dig(:shootoutDetails, :visitingTeamShots)
game.raw_data.dig(:shootoutDetails, :homeTeamShots)
continue
game.raw_data[:penaltyShots][:visitingTeam]
game.raw_data[:penaltyShots][:homeTeam]
continue
penalty_shots[1]
continue
penalty_shots[1]
continue
penalty_shots[1]
penalty_shots[0]
continue
game.raw_data[:penaltyShots][:visitingTeam]
game.raw_data[:penaltyShots][:homeTeam]
raw_data[:penaltyShots][:homeTeam] + raw_data[:penaltyShots][:visitingTeam]
continue
