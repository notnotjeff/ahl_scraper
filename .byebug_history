continue
players.first
players
continue
players.first
continue
players.first
players.first.rookie?
players
continue
a[28]
PlayerObject.new(a[28])
PlayerObject.new(a[27])
PlayerObject.new(a[26])
PlayerObject.new(a[25])
PlayerObject.new(a[24])
PlayerObject.new(a[23])
PlayerObject.new(a[22])
PlayerObject.new(a[21])
PlayerObject.new(a[20])
PlayerObject.new(a[19])
PlayerObject.new(a[18])
PlayerObject.new(a[17])
PlayerObject.new(a[16])
PlayerObject.new(a[15])
PlayerObject.new(a[14])
PlayerObject.new(a[13])
PlayerObject.new(a[12])
PlayerObject.new(a[11])
PlayerObject.new(a[10])
PlayerObject.new(a[9])
PlayerObject.new(a[8])
PlayerObject.new(a[7])
PlayerObject.new(a[6])
PlayerObject.new(a[5])
PlayerObject.new(a[4])
PlayerObject.new(a[3])
PlayerObject.new(a[2])
PlayerObject.new(a[1])
PlayerObject.new(a[0])
a[0]
a=Fetch::TeamRosterData.new(team_id, season_id).call
continue
Fetch::TeamRosterData.new(team_id, season_id).call[0]
Fetch::TeamRosterData.new(team_id, season_id).call
continue
players
continue
players
continue
roster_data[0]
roster_data
continue
@player_bio_data[0]
merge_all_data
continue
(forward_data + defencemen_data + goalie_data).filter { |player| !player[:row][:player_id].nil? }.index_by { |player| player[:row][:player_id] }
(forward_data + defencemen_data + goalie_data).filter { |player| !player[:row][:player_id].nil? }.index_by{ |player| player[:row][:player_id] }
@positional_data
(forward_data + defencemen_data + goalie_data).filter { |player| !player[:row][:player_id].nil? }
@player_data
@roster_data.dig(:roster, 0, :sections)[0..2].map { |players| players[:data] }.flatten
@roster_data.dig(:roster, 0, :sections)[0..2].map { |players| players[:data] }
@roster_data.dig(:roster, 0, :sections)[0..2]
@roster_data.dig(:roster, 0, :sections)
@roster_data
@positional_data
@player_data[0]
@player_data
continue
teams.first.keys
teams.first.name
teams.first.id
teams.first
teams
continue
team_data[0]
team_data
continue
team_data
continue
tt.length
tt
tt=tt.flatten
tt.length
tt.flatten
tt
tt.keys
tt.length
tt=team_data.map { |t| t[:data] }
team_data[0].keys
team_data[0].length
team_data[0]
continue
a.length
a=team_data.flatten
team_data.flatten
team_data[0][:data].length
team_data[0][:data]
team_data[0].keys
team_data[0]
team_data
continue
game.keys
continue
statlines
goal
continue
goal
continue
goal_data
add_scoring_data_to_statlines
create_blank_statlines_for_skaters
continue
{ home_team: false, team_id: away_team.id, team_abbreviation: away_team.abbreviation }
raw_goals.filter { |g| g[:team][:id] == away_team.id }
raw_goals
@raw_data[:visitingTeam][:skaters]
continue
game.away_skaters
continue
ATTRIBUTES.map { |m| p send(m) }
continue
ATTRIBUTES.map { |m| p send(m) }
ATTRIBUTES.map do |m| p m; send(m); end;
ATTRIBUTES.map { |m| p m; send(m); }
ATTRIBUTES.map { |m| p m; send(m) }
ATTRIBUTES.map { |m| send(m) }
ATTRIBUTES.map { |m| p m }
ATTRIBUTES.map { |m| m }
ATTRIBUTES
ATTRIBUTES.map { |m| [m, send(m)] }
ATTRIBUTES.map do |m|
   66:           [m, send(m)]
   67:         end
continue
game.values
game
continue
game.send(:home_skaters)
gamesend(:home_skaters)
game.values
game
game.home_skaters
continue
game.home_skaters
game
continue
game
continue
game
continue
game
continue
game
continue
game
continue
game.keys
game.status
game
continue
game.to_json
game
continue
game.to_json
game
continue
game
continue
game.to_json
continue
game.game_id
continue
game.to_json
game
continue
game.keys
game.values
game.inspect
game
continue
gi=games.dig(0, :sections, 0, :data)&.map { |g| g[:prop][:game_center][:gameLink].to_i }
gi=games.dig([0], :sections)
gi=games.dig(:first, :sections)
gi=games.dig(:first, :sections, :first, :data)&.map { |g| g[:prop][:game_center][:gameLink].to_i }
gi=games.dig(:first, :sections, :data)&.map { |g| g[:prop][:game_center][:gameLink].to_i }
gi.count
gi=games[0][:sections][0][:data].map { |g| g[:prop][:game_center][:gameLink].to_i }
games[0][:sections][0][:data][0]
games[0][:sections][0].keys
games[0].keys
games[0]
games
games.keys
continue
s
continue
season_data.first.name
season_data.first.id
season_data
continue
game.game_id
game.status
game.id
game
continue
data.season_type
data
continue
data[0].methods
data[0].divisions
data[0].teams.length
data[0].teams
data[0].season_type
data.season_type
data
continue
data
continue
s.values
s=SeasonObject.new(season_data[0])
SeasonObject.new(season_data[0])
continue
data
continue
a.select { |s| p season_ids.include? s[:id].to_i }
a.select { |s| p season_ids.include? s["id"].to_i }
a.select { |s| season_ids.include? s["id"].to_i }
a=Fetch::SeasonData.new.call
season_ids
season_data
season_idata
continue
a=Fetch::SeasonData.new.call
season_data
season_ids
continue
data
continue
season_data
continue
season_data[:seasons]
season_data
season_data[0]
season_data
continue
season.divisions
continue
season.teams.last
season.teams.first
season.divisions
season.keys
season
season.teams.length
continue
