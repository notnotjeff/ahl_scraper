continue
game.game_id
game.status
game.id
game
continue
data.season_type
data
continue
data[0].methods
data[0].divisions
data[0].teams.length
data[0].teams
data[0].season_type
data.season_type
data
continue
data
continue
s.values
s=SeasonObject.new(season_data[0])
SeasonObject.new(season_data[0])
continue
data
continue
a.select { |s| p season_ids.include? s[:id].to_i }
a.select { |s| p season_ids.include? s["id"].to_i }
a.select { |s| season_ids.include? s["id"].to_i }
a=Fetch::SeasonData.new.call
season_ids
season_data
season_idata
continue
a=Fetch::SeasonData.new.call
season_data
season_ids
continue
data
continue
season_data
continue
season_data[:seasons]
season_data
season_data[0]
season_data
continue
season.divisions
continue
season.teams.last
season.teams.first
season.divisions
season.keys
season
season.teams.length
continue
season.teams.length
season.teams
season.end_year
season
continue
season.teams.first
season.teams.first.keys
season.teams.first.to_json
continue
season.teams.first.to_json
continue
season.teams.first.values
continue
season.teams.first.values
season.teams.first.attributes
season.teams.first.keys
season.teams.first.parameterized_name
season.teams.first
continue
season.teams.first
season.teams
season.teams.first.parameterized_name
continue
season.teams.first.parameterized_name
season.teams.first
season.teams
continue
teams
continue
[1,2,3].map { AhlScraper::Seasons::TeamObject.new({}, "") }
season.teams
continue
[1,2,3].map { AhlScraper::Seasons::TeamObject.new({}, "") }
a=AhlScraper::Seasons::TeamObject.new({}, "")
AhlScraper::Seasons::TeamObject.new
AhlScraper::Seasons::TeamObject
TeamObject
season.teams
season.division_teams
continue
season.teams
continue
season.teams
continue
season.teams
continue
season.teams
continue
TeamObject.new(division[:data][0], division_name)
Array.new(division[:data])
t
continue
division[:data].map { |team| TeamObject.new(team, division_name) }
t
continue
division.dig(:headers, :name, :properties, :title)
division[:data].map { |d| 1 }
t
continue
a.full_name
a=TeamObject.new(team, division.dig(:headers, :name, :properties, :title))
TeamObject.new(team, division.dig(:headers, :name, :properties, :title))
continue
division[:data]
t
continue
season.teams
continue
season.teams
continue
season.teams
continue
season.divisions
continue
season.divisions
continue
season.divisions
continue
season.divisions
season
continue
season
continue
@division_data[0][:data][6]
@division_data[0][:data][5]
@division_data[0]
@division_data
continue
@division_data
continue
@division_data
continue
@division_data
continue
parameterized_name
full_name
continue
full_name
parameterized_name
continue
full_name.split
full_name.split.length > 2
EXCEPTIONS[parameterize(full_name)][:name]
continue
parameterized_string
continue
parameterized_string
continue
parameterized_string
continue
parameterize(full_name)
full_name
continue
data[0][:data][0]
data[0][:data]
data[0]
data[1][:headers][:name][:properties]
data.length
data.keys
data[1][:headers][:name]
data[0][:headers][:name]
data[0][:headers].keys
data[0][:data][0]
data[0][:data]
data[0][:headers]
data[0][:title]
data[0].keys
data[0]
continue
season_start_date
season_end_date
season_end_data
continue
season_end_data
continue
season_start_data
continue
season_start_data.first[:sections].first[:data]&.first&.dig(:row, :date_with_day)
season_start_data.first[:sections].first[:data]&.first[:row][:date_with_day]
season_start_data.first[:sections].first[:data]&.first
season_start_data.first[:sections].first[:data]&.first&.row
season_start_data.first[:sections].first[:data].first
season_start_data.first[:sections].first[:data].dig(:first)
season_start_data.first[:sections].first[:data].try(:first)
season_start_data.first[:sections].first[:data]
season_start_data.first[:sections][:data]
season_start_data.first[:sections]
season_start_data.firstp:sections]
season_start_data
continue
season_start_data
continue
game.season_id
continue
game.season_id
continue
game.season_id
continue
game.season_id
continue
season
continue
season
continue
seasons[:seasons]
seasons.keys
seasons
seasons[0]
seasons
continue
s
continue
raw_data[:shootoutDetails][:visitingTeamShots].map {|sh| sh[:shooter][:id] }
raw_data[:shootoutDetails][:homeTeamShots].map {|sh| sh[:shooter][:id] }
raw_data[:shootoutDetails][:homeTeamShots][0][:shooter][:id]
raw_data[:shootoutDetails][:homeTeamShots][0]
raw_data[:shootoutDetails][:homeTeamShots]
raw_data[:shootoutDetails]
continue
game.home_shootout_attempts
continue
raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index { |att, i| 1 }
raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index { |att, i| }
@raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index { |att, i| }
        end
          ShootoutAttempt.new(att, { number: i + 1 })
@raw_data.dig(:shootoutDetails, :homeTeamShots)&.map&.with_index do |att, i|
game.home_shootout_attempts
continue
(raw_data.dig(:shootoutDetails, :homeTeamShots) || []).map.with_index
raw_data.dig(:shootoutDetails, :homeTeamShots) || []
raw_data.dig(:shootoutDetails, :homeTeamShots)
continue
raw_data.dig(:shootoutDetails, :homeTeamShots)
Array.new(raw_data.dig(:shootoutDetails, :homeTeamShots))
game.home_shootout_attempts
continue
game.home_shootout_attempts
continue
game.home_shootout_attempts
continue
